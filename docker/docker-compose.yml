# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: meeting_whisperer_db
    environment:
      POSTGRES_USER: meeting_user
      POSTGRES_PASSWORD: meeting_pass
      POSTGRES_DB: meeting_whisperer
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - meeting_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: meeting_whisperer_redis
    ports:
      - "6379:6379"
    networks:
      - meeting_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: meeting_whisperer_backend
    environment:
      - DATABASE_URL=postgresql://meeting_user:meeting_pass@postgres:5432/meeting_whisperer
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - meeting_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: meeting_whisperer_worker
    environment:
      - DATABASE_URL=postgresql://meeting_user:meeting_pass@postgres:5432/meeting_whisperer
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - meeting_network
    command: celery -A app.workers.celery_app worker --loglevel=info

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: meeting_whisperer_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - meeting_network
    command: npm run dev

volumes:
  postgres_data:

networks:
  meeting_network:
    driver: bridge